{
	"info": {
		"_postman_id": "96aaec89-d777-4b63-9bb9-2b1040c076cd",
		"name": "Contact List API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20113688",
		"_collection_link": "https://universal-meadow-703950.postman.co/workspace/Contact-List-API-Testing~d2f43a0c-9839-4d37-9ff8-239bd5b78171/collection/20113688-96aaec89-d777-4b63-9bb9-2b1040c076cd?action=share&source=collection_link&creator=20113688"
	},
	"item": [
		{
			"name": "Contacts",
			"item": [
				{
					"name": "add new contact with valid fileds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response contains newly created contact\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.firstName).to.eql(\"Wajiha\");\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Amassi\");\r",
									"    pm.expect(jsonData.email).to.eql(\"wajihaamassi@gmail.com\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMxODI5ODV9.-3vE03TvNTEH_rC_gDTrUv8NZuzxMfGyEjm9HhCs4kY",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Wajiha\",\r\n  \"lastName\": \"Amassi\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"wajihaamassi@gmail.com\",\r\n  \"phone\": \"059434544\",\r\n  \"street\":\"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get auth",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"wajihaamassi25@gmail.com\",\r\n    \"password\":\"123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "adding new contact without auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response should indicate missing or invalid token\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"\r",
									"    if (jsonData.error && typeof jsonData.error === \"string\") {\r",
									"        pm.expect(jsonData.error.toLowerCase()).to.include(\"please authenticate.\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"noraa\",\r\n  \"lastName\": \"Amassi\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"noraaamassi@gmail.com\",\r\n  \"phone\": \"059434533\",\r\n  \"street\":\"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "invaild email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should indicate invalid email format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property(\"errors\");\r",
									"    pm.expect(jsonData.errors).to.have.property(\"email\");\r",
									"    \r",
									"    const emailErrorMessage = jsonData.errors.email.message;\r",
									"    pm.expect(emailErrorMessage.toLowerCase()).to.include(\"invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMxODQ1Njl9.tw09BCMKV3aWWnirBO-0xxitqonhnruC_FoWTl4zLmw",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"majed \",\r\n  \"lastName\": \"Amassi\",\r\n  \"birth date\": \"2002-12-0\",\r\n  \"email\": \"majedmassi$gmail.com\",\r\n  \"phone\": \"059434511\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "add without email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should include validation message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNTg1ODZ9.fEJq5vK9NtnPi6iYSntXCItBcMuNNvGvdOEwoZ9RGXs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"nora \",\r\n  \"lastName\": \"Amassi\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"phone\": \"059434522\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "add with phone number contain latters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should indicate invalid phone number format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"errors\");\r",
									"    pm.expect(jsonData.errors).to.have.property(\"phone\");\r",
									"\r",
									"    const phoneError = jsonData.errors.phone.message;\r",
									"    pm.expect(phoneError.toLowerCase()).to.include(\"invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNTg1ODZ9.fEJq5vK9NtnPi6iYSntXCItBcMuNNvGvdOEwoZ9RGXs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"sajeda \",\r\n  \"lastName\": \"Amassi\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"sajedamassi@gmail.com\",\r\n  \"phone\": \"059abc3500\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "adding with empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should indicate at least one required field is missing\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    const errorFields = Object.keys(jsonData.errors);\r",
									"\r",
									"    errorFields.forEach(function(field) {\r",
									"        pm.expect(jsonData.errors[field].message.toLowerCase()).to.include(\"required\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNTg1ODZ9.fEJq5vK9NtnPi6iYSntXCItBcMuNNvGvdOEwoZ9RGXs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "adding existing contact",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNTg1ODZ9.fEJq5vK9NtnPi6iYSntXCItBcMuNNvGvdOEwoZ9RGXs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Wajiha \",\r\n  \"lastName\": \"Amassi\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"wajihaamassi@gmail.com\",\r\n  \"phone\": \"059434512\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user with numeric name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should indicate invalid name format\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"  \r",
									"    if (jsonData.firstName && typeof jsonData.firstName === \"object\") {\r",
									"        pm.expect(jsonData.firstName.message.toLowerCase()).to.include(\"letters\");\r",
									"    } else {\r",
									"        \r",
									"        const responseText = JSON.stringify(jsonData).toLowerCase();\r",
									"        pm.expect(responseText).to.include(\"name\").and.to.include(\"letters\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNTg1ODZ9.fEJq5vK9NtnPi6iYSntXCItBcMuNNvGvdOEwoZ9RGXs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"1234\",\r\n  \"lastName\": \"5678\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"numuser@gmail.com\",\r\n  \"phone\": \"059434544\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "adding with special char",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400 or 422 for invalid characters\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains error message about invalid characters\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('error');\r",
									"    pm.expect(jsonData.error.toLowerCase()).to.include('invalid');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNTg1ODZ9.fEJq5vK9NtnPi6iYSntXCItBcMuNNvGvdOEwoZ9RGXs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"@ali \",\r\n  \"lastName\": \"Amassi\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"aliamassi@gmail.com\",\r\n  \"phone\": \"059434513\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "adding duplicate phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should not allow duplicate phone number\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 409]);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNTg1ODZ9.fEJq5vK9NtnPi6iYSntXCItBcMuNNvGvdOEwoZ9RGXs",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Mohammed \",\r\n  \"last Name\": \"Amassi\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"mohammedamassi@gmail.com\",\r\n  \"phone\": \"059434544\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "adding with future birthdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should reject future birth date\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message should mention birth date\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error.toLowerCase()).to.include(\"birth\").or.to.include(\"date\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjIwMDB9.6tMelrsh5d5xp1zw19Rk07S51OS7EjkGIR_mll7VpjA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"adla \",\r\n  \"lastName\": \"Amassi\",\r\n  \"birth date\": \"2026-12-01\",\r\n  \"email\": \"adlaamassi@gmail.com\",\r\n  \"phone\": \"059434512\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "adding too long char",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res;\r",
									"\r",
									"try {\r",
									"    res = pm.response.json();\r",
									"} catch (e) {\r",
									"    console.error(\"Response is not JSON\");\r",
									"    return;\r",
									"}\r",
									"\r",
									"pm.test(\"Should reject long name\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjIwMDB9.6tMelrsh5d5xp1zw19Rk07S51OS7EjkGIR_mll7VpjA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Wajihaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaakkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk \",\r\n  \"lastName\": \"ali\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"wajihaamassi@gmail.com\",\r\n  \"phone\": \"059434544\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get contact with valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array of contacts\", function () {\r",
									"    const data = pm.response.json();\r",
									"    pm.expect(data).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjIwMDB9.6tMelrsh5d5xp1zw19Rk07S51OS7EjkGIR_mll7VpjA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first name\": \"Wajihaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaakkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk \",\r\n  \"last name\": \"ali\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"wajihaamassi@gmail.com\",\r\n  \"phone\": \"059434544\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get contact without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Should not allow access without authentication\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Error field should mention authentication\", function () {\r",
									"    pm.expect(json).to.have.property(\"error\");\r",
									"    pm.expect(json.error.toLowerCase()).to.include(\"authenticate\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhb////GciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjIwMDB9.6tMelrsh5d5xp1zw19Rk07S51OS7EjkGIR_mll7VpjA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first name\": \"Wajihaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaakkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk \",\r\n  \"last name\": \"ali\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"wajihaamassi@gmail.com\",\r\n  \"phone\": \"059434544\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get with pangiation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should contain contacts array\", function () {\r",
									"    const res = pm.response.json();\r",
									"\r",
									"   \r",
									"    const contacts = res.data || res.contacts || res;\r",
									"\r",
									"    pm.expect(contacts).to.be.an(\"array\");\r",
									"    pm.expect(contacts.length).to.be.at.most(28);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjc1NTJ9.YLUtEpZKL54ENEqMo9YcL8SCL77m7M1nNvvlsTyhHss",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts?page=1&limit=5",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get alphabetically by first name.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contacts should be sorted alphabetically by first name\", function () {\r",
									"    const res = pm.response.json();\r",
									"    const contacts = res.data || res.contacts || res;\r",
									"\r",
									"    const names = contacts.map(c => c.first_name?.toLowerCase?.() || \"\");\r",
									"\r",
									"   \r",
									"    const unique = [...new Set(names)];\r",
									"    if (unique.length <= 1) {\r",
									"        console.warn(\"Skipping sort check — all first names are identical.\");\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    const sorted = [...names].sort();\r",
									"    pm.expect(names).to.eql(sorted);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjc1NTJ9.YLUtEpZKL54ENEqMo9YcL8SCL77m7M1nNvvlsTyhHss",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first name\": \"Wajihaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaakkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk \",\r\n  \"last name\": \"ali\",\r\n  \"birth date\": \"2002-12-01\",\r\n  \"email\": \"wajihaamassi@gmail.com\",\r\n  \"phone\": \"059434544\",\r\n  \"street\": \"al senaa\",\r\n  \"city\": \"Gaza\",\r\n  \"stateProvince\": \"PS\",\r\n  \"postalCode\": \"12345\",\r\n  \"country\": \"Palestine\"\r\n}"
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts?sort=first name&order=asc.",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "sort",
									"value": "first name"
								},
								{
									"key": "order",
									"value": "asc."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get city query parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All contacts should be from the specified city\", function () {\r",
									"    const res = pm.response.json();\r",
									"    const contacts = res.data || res.contacts || res;\r",
									"\r",
									"    contacts.forEach(contact => {\r",
									"        pm.expect(contact.city.toLowerCase()).to.eql(\"gaza\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjc1NTJ9.YLUtEpZKL54ENEqMo9YcL8SCL77m7M1nNvvlsTyhHss",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts?city=Gaza.",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "city",
									"value": "Gaza."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get country query parameter.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All contacts should be from the specified country\", function () {\r",
									"    const res = pm.response.json();\r",
									"    const contacts = res.data || res.contacts || res;\r",
									"\r",
									"    contacts.forEach(contact => {\r",
									"        pm.expect(contact.country.toLowerCase()).to.eql(\"palestine\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjc1NTJ9.YLUtEpZKL54ENEqMo9YcL8SCL77m7M1nNvvlsTyhHss",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts?country=Palestine.",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "country",
									"value": "Palestine."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get  filtering by special characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"At least one contact should contain special characters in any text field\", function () {\r",
									"    const response = pm.response.json();\r",
									"    const contacts = response.data || response.contacts || response;\r",
									"\r",
									"    pm.expect(contacts).to.be.an(\"array\").that.is.not.empty;\r",
									"\r",
									"    const specialCharRegex = /[^a-zA-Z0-9\\s]/;\r",
									"\r",
									"    let found = false;\r",
									"\r",
									"    contacts.forEach(contact => {\r",
									"        const textFields = Object.values(contact).filter(val => typeof val === \"string\");\r",
									"        if (textFields.some(val => specialCharRegex.test(val))) {\r",
									"            found = true;\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.expect(found, \"No contact contains special characters in text fields\").to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjc1NTJ9.YLUtEpZKL54ENEqMo9YcL8SCL77m7M1nNvvlsTyhHss",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts?firstName=Wa@jeha!",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "firstName",
									"value": "Wa@jeha!"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get  expired tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should reject request with expired token\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjc1NTJ9.YLUtEpZKL54ENEqMo9YcL8SsCL77m7M1nNvvlsTyhHss",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "get by  unexpected parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API should ignore or handle unexpected parameter\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should not crash or return internal server error\", function () {\r",
									"    pm.expect(pm.response.code).to.not.eql(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjg3NzB9.0TuGqiGIGX0Wfz44ISmaZ24VTm8N1i1BLH9Qwco8fN8",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts?invalidParam=xyz.",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "invalidParam",
									"value": "xyz."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get contact by valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API should ignore or handle unexpected parameter\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should not crash or return internal server error\", function () {\r",
									"    pm.expect(pm.response.code).to.not.eql(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjg3NzB9.0TuGqiGIGX0Wfz44ISmaZ24VTm8N1i1BLH9Qwco8fN8",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/68809de8b9cbc800152c0d56",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"68809de8b9cbc800152c0d56"
							]
						}
					},
					"response": []
				},
				{
					"name": "get contact by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 404 for invalid contact ID\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmNzIzMzdiYzU2NjAwMTVlM2JlMzUiLCJpYXQiOjE3NTMyNjg3NzB9.0TuGqiGIGX0Wfz44ISmaZ24VTm8N1i1BLH9Qwco8fN8",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/contacts/68809de8b9cbc800152c0d57",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"contacts",
								"68809de8b9cbc800152c0d57"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Simultaneous Requests",
					"item": [
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"a\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					],
					"description": "Simulate Two Requests ( Delete , Patch )\n\nTC-037"
				},
				{
					"name": "update user-load test & stress test",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"firstName is آية\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
											"});\r",
											"\r",
											"pm.test(\"lastName is a \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
											"});\r",
											"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token -A}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/users/me",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					],
					"description": "load test TC-016\n\nstress test TC-017"
				},
				{
					"name": "Add User - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"token\", jsonData.token);\r",
									"pm.environment.set(\"variable_key\",jsonData.user._id);\r",
									"pm.environment.set(\"firstName\", jsonData.user.firstName);\r",
									"pm.environment.set(\"lastName\", jsonData.user.lastName);\r",
									"pm.environment.set(\"email\", jsonData.user.email);\r",
									"pm.environment.set(\"id\",jsonData.user._id);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Created \", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in json Format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has correct structure\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"    pm.expect(jsonData.user).to.have.property(\"_id\");\r",
									"    pm.expect(jsonData.user).to.have.property(\"firstName\");\r",
									"    pm.expect(jsonData.user).to.have.property(\"lastName\");\r",
									"    pm.expect(jsonData.user).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response Body has all expected keys \" , function(){\r",
									"    pm.expect(jsonData).to.have.all.keys(\"user\", \"token\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response body contains correct user ID\", function () {\r",
									"    pm.expect(jsonData.user._id).to.eql(pm.environment.get(\"id\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains correct user information\", function () {\r",
									"    pm.expect(jsonData.user.firstName).to.eql(pm.environment.get(\"firstName\"));\r",
									"    pm.expect(jsonData.user.lastName).to.eql(pm.environment.get(\"lastName\"));\r",
									"    pm.expect(jsonData.user.email).to.eql(pm.environment.get(\"email\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"First Name & Last Name are String \" , function(){\r",
									"    pm.expect(jsonData.user.firstName).to.be.a('string');\r",
									"    pm.expect(jsonData.user.lastName).to.be.a('string');\r",
									"})\r",
									"\r",
									"pm.test(\"Email is a valid email Format\", function () {\r",
									"    pm.expect(jsonData.user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is a valid ObjectId\", function () {\r",
									"    pm.expect(jsonData.user._id).to.match(/^[0-9a-fA-F]{24}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the response headers for the Add User API endpoint are correctly returned \", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
									"     pm.response.to.have.header(\"Set-Cookie\");\r",
									"});\r",
									"\r",
									"pm.test(\"Token is present and is a string\", function () {\r",
									"    pm.expect(jsonData.token).to.not.be.empty;\r",
									"    pm.expect(jsonData.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"User email matches payload email\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
									"    pm.expect(jsonData.user.email).to.eql(requestBody.email);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Mai\",\r\n    \"lastName\": \"Okasha\",\r\n    \"email\": \"mai_okasha982@gmail.com\",\r\n    \"password\": \"123456msn7\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Password Length 7 (Valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"token\", jsonData.token);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Created \", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has correct user information\", function () {\r",
									"    pm.expect(jsonData.user.firstName).to.eql(\"Mai\");\r",
									"    pm.expect(jsonData.user.lastName).to.eql(\"Ok.\");\r",
									"    pm.expect(jsonData.user.email).to.eql(\"mai_ok123@gmail.com\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response body has correct token\", function () {\r",
									"        pm.expect(jsonData.token).to.not.be.empty;\r",
									"        });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Mai\",\r\n    \"lastName\": \"Ok.\",\r\n    \"email\": \"mai12345@gmail.com\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Invalid Password Length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message is returned\", function () {\r",
									"     pm.expect(jsonData.errors).to.have.property(\"password\");\r",
									"    pm.expect(jsonData.errors.password).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.errors.password.message).to.include(\"shorter than the minimum allowed length\");\r",
									"    pm.expect(jsonData._message).to.eql(\"User validation failed\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Mai\",\r\n    \"lastName\": \"Ok.\",\r\n    \"email\": \"maifu1234@gmail.com\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Duplicate Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Ensure a proper Error message for duplicate email \", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Email address is already in use\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Mai\",\r\n    \"lastName\": \"Ok.\",\r\n    \"email\": \"mai123@gmail.com\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Empty Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									" const jsonData = pm.response.json();\r",
									"// No Json Body in Response \r",
									"pm.test(\"Error message for missing email is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Email is required\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Mai\",\r\n    \"lastName\": \"Ok.\",\r\n    \"email\": ,\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Missing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									" const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message for missing email is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Email is required\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Mai\",\r\n    \"lastName\": \"Ok.\",\r\n    \"password\": \"1234567\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Missing First Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									" const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message for missing email is correct\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.eql(\"First Name is required\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"lastName\": \"Okasha\",\r\n    \"email\": \"maiokasha$123@gmail.com\",\r\n    \"password\": \"1234567mrt\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for missing email is correct\", function () {\r",
									"    pm.expect(jsonData.errors).to.have.property(\"email\");\r",
									"    pm.expect(jsonData.errors.email.message).to.eql(\"Email is invalid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\" : \"Mai\" ,\r\n    \"lastName\": \"Okasha\",\r\n    \"email\": \"maiokasha$123\",\r\n    \"password\": \"1234567mrt\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User - Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json(); // No JSon Response Body \r",
									"\r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is Method Not Allowed \", function () {\r",
									"    pm.response.to.have.status(\"Method Not Allowed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for missing email is correct\", function () {\r",
									"    pm.expect(jsonData.errors).to.have.property(\"Method\");\r",
									"    pm.expect(jsonData.errors.email.message).to.eql(\"Mehod Not Allowed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log In User - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name is OK \", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Body has a correct Structure \", function () {\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"});\r",
									"\r",
									"pm.test(\"Response Body has all expected keys : id , first name , last name , email , token\" , function(){\r",
									"    pm.expect(jsonData.user).to.have.property('_id');\r",
									"    pm.expect(jsonData.user).to.have.property('firstName');\r",
									"    pm.expect(jsonData.user).to.have.property('lastName');\r",
									"    pm.expect(jsonData.user).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('token');\r",
									"})\r",
									"\r",
									"pm.test(\"User's first name, last name , email values are  correct \", function () {\r",
									"    pm.expect(jsonData.user.firstName).to.eql(pm.environment.get(\"firstName\"));\r",
									"    pm.expect(jsonData.user.lastName).to.eql(pm.environment.get(\"lastName\"));\r",
									"    pm.expect(jsonData.user.email).to.eql(pm.environment.get(\"email\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Token is not empty\", function () {\r",
									"    pm.expect(jsonData.token).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a string\", function () {\r",
									"    pm.expect(jsonData.token).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Token is not null\", function () {\r",
									"    pm.expect(jsonData.token).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in json Format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"User object is returned\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"});\r",
									"\r",
									"pm.test(\"Email in response matches request\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let emailSent = pm.request.body.raw ? JSON.parse(pm.request.body.raw).email : null;\r",
									"    pm.expect(jsonData.user.email).to.eql(emailSent);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"123456msn7\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User - Missing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code title is Unauthorized \", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains error message for missing field\", function () {\r",
									"    pm.expect(jsonData).to.have.any.keys(\"error\", \"message\");\r",
									"    pm.expect(jsonData.error || jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.error || jsonData.message.toLowerCase()).to.include(\"required\").or.include(\"missing\");\r",
									"    pm.expect(jsonData.error || jsonData.message.toLowerCase()).to.include(\"email\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"12343837yi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User - Incorrect Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code title is Unauthorized \", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is returned\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error.toLowerCase()).to.include(\"invalid\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"123456msn\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User - Non Registered User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code title is Unauthorized \", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"// An Empty Response Body \r",
									"pm.test(\"Error message is returned\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error || jsonData.message.toLowerCase()).to.include(\"not found\").or.include(\"invalid\").or.include(\"unauthorized\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"non_registered@gmail.com\",\r\n    \"password\": \"12343837yi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User - Empty Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 422 for empty payload\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.any.keys(\"error\", \"message\");\r",
									"    pm.expect(jsonData.error || jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.error || jsonData.message.toLowerCase()).to.include(\"required\").or.include(\"missing\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code title is Unauthorized \", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json(); // An Empty Respose Body \r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    pm.expect(jsonData.errors.email.message).to.include(\"Email is required\");\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \" \",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code title is Unauthorized \", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is returned\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error.toLowerCase()).to.include(\"invalid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"maiokasha\",\r\n    \"password\": \"1234567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code title is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response returns  correct headers \", function() {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in json Format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Check Response has all required keys \" , function(){\r",
									"    pm.expect(jsonData).to.have.all.keys(\"_id\", \"firstName\" , \"lastName\" , \"email\" , \"__v\");\r",
									"\r",
									"})\r",
									"\r",
									"pm.test(\"Check Response has correct values \" , function(){\r",
									"    pm.expect(jsonData.firstName).to.eql(\"Mai\");\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Okasha\");\r",
									"    pm.expect(jsonData.email).to.eql(\"mai_okasha98@gmail.com\");\r",
									"    })\r",
									"\r",
									"pm.test(\"Check Response has an id \" , function(){\r",
									"    pm.expect(jsonData).to.haveOwnProperty(\"_id\");\r",
									"    pm.expect(jsonData._id).to.not.eql(null);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Response has correct _id \" , function(){\r",
									"    pm.expect(jsonData._id).to.eql(\"688174c49757ef0015f82254\");\r",
									" })\r",
									"\r",
									"pm.test(\"Check Response has correct __v \" , function(){\r",
									"    pm.expect(jsonData.__v).to.eql(3);\r",
									"    })\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code title is Unauthorized \", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is returned\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error.toLowerCase()).to.include(\"authenticate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User with invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code title is Unauthorized \", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is returned\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error.toLowerCase()).to.include(\"authenticate\") || \r",
									"    pm.expect(jsonData.error.toLowerCase()).to.include(\"invalid token\")\r",
									"    ;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{invalidtoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- token",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- update all of user credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"first name is a\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).to.eql(\"a\");\r",
									"});\r",
									"pm.test(\"last name is a\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
									"});\r",
									"pm.test(\"email name is shanteer@hotmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"a\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- update one of user credential",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"first name is aya\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).to.eql(\"aya\");\r",
									"});\r",
									"pm.test(\"last name is aa\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).to.eql(\"aa\");\r",
									"});\r",
									"pm.test(\"email name is shanteer@hotmail.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"aya\",\r\n    \"lastName\": \"aa\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- using PUT method",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"ayah\",\r\n    \"lastName\": \"lll\",\r\n    \"email\": \"aya@hotmail.com\",\r\n    \"password\": \"1234567\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- wrong pattern email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"aya\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"a\",\r\n    \"password\": \"aaaaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- show consistency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"aya\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"a\",\r\n    \"password\": \"aaaaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- show consistency 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"aya\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"a\",\r\n    \"password\": \"aaaaaaa\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- without request body",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- wrong data type",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": 1,\r\n    \"lastName\": 11,\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": 1111111\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- wrong data type-email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": 1,\r\n    \"password\":\"aaaaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"aya\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- new token for TC-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"testaya@hotmail.com\",\r\n    \"password\": \"test1234\"\r\n}\r\n   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- using other account email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token2- A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaaaaaaa\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- change id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"_id\": \"787f5dfe40c4990015bf6fed\",\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- without change",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\":\"aaaaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- null values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": Null,\r\n    \"lastName\": Null,\r\n    \"email\": NULL,\r\n    \"password\": NULL\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- 30 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n    \"lastName\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- 130 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"aya\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- Arabic letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"firstName is آية\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).to.eql(\"آية\");\r",
									"});\r",
									"\r",
									"pm.test(\"lastName is a \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.lastName).to.eql(\"a\");\r",
									"});\r",
									"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"shanteer@hotmail.com\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user- 1 characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\":\"a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout user- using valid token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\":\"a\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/users/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout user- token invalid after logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaaaaaaa\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout user- without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout user-  log out twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout user- log in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"response contains token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});\r",
									"pm.test(\"firstname is آية\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user.firstName).to.eql(\"آية\");\r",
									"});\r",
									"pm.test(\"lastName is a\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user.lastName).to.eql(\"a\");\r",
									"});\r",
									"pm.test(\"email is shanteer@hotmail.com \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user.email).to.eql(\"shanteer@hotmail.com\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout user- using GET method",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout user- invalid URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/me/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- can't login to deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n   ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- user can't do a request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"a\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- add new account with previous email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"response contain token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"آية\",\r\n    \"lastName\": \"a\",\r\n    \"email\": \"shanteer@hotmail.com\",\r\n    \"password\": \"aaaaaaa\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- using POST method",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- invalid URL",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/users/me/account",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- after logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user- expired token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token }}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user-response time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token -A}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODgwYTE4MGI5Y2JjODAwMTUyYzBkNzgiLCJpYXQiOjE3NTMyNjQ5NDF9.CI7XqwsnUbp2nrmwGBbAGCBcNVkXFoROSQnbCzXAZtA",
			"type": "default"
		},
		{
			"key": "token2",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODdmYTJlNTdiYzU2NjAwMTVlM2JmNDciLCJpYXQiOjE3NTMyNjUxMDR9.j5VhsyKvlG6X7Op2V2BhhG5jYM6w7wchyW4-MyNyR-8",
			"type": "default"
		}
	]
}